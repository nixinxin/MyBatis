<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goods">
    <!--开启二级缓存
        eviction表示缓存的清除策略，当缓存对象数量达到上线后，自动触发对应算法对缓存对象进行清除
            1.LRU   最近最少使用的：移除最长时间不被使用的缓存对象
            2.FIFO  先进先出：按对象进入缓存的顺序来移除它们
            3.SOFT  软引用：移除基于垃圾回收器状态和软引用规则的对象
            4.WEAK  弱引用：更积极地移除基于垃圾回收器状态和软引用规则的对象
        flushInterval: 代表需要多长时间自动清空缓存，单位为毫秒
        size: 缓存上限，用于保存对象或集合的数量上线
        readOnly:
            true:换回只读缓存，每次从缓存中取出的是缓存对象本身，这种执行效率较高
            false：代表每次取出的是缓存对象的副本，每一次取出的对象都是不同的，这种安全性较高
    -->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true"/>
    <select id="selectAll" resultType="com.imooc.mybatis.entity.Goods" useCache="false">
        select *
        from babytun.t_goods
        order by goods_id
        limit 10
    </select>
    <select id="selectById" parameterType="Integer" resultType="com.imooc.mybatis.entity.Goods" useCache="true">
        select *
        from babytun.t_goods
        where goods_id = #{value}
    </select>
    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select * from babytun.t_goods
        <where>
            <if test="categoryId != null">
                and category_id = #{categoryId}
            </if>
            <if test="currentPrice != null">
                and current_price &lt; #{currentPrice}
            </if>
        </where>
    </select>
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.imooc.mybatis.entity.Goods">
        select *
        from babytun.t_goods
        where current_price between #{min} and #{max}
        order by current_price
        limit 0, #{limit}
    </select>
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap">
        select g.*, c.category_id
        from babytun.t_goods g,
             babytun.t_category c
        where g.category_id = c.category_id
    </select>
    <resultMap id="rmGoods" type="com.imooc.mybatis.dto.GoodsDTO">
        <id property="goods.goodsId" column="goods_id"/>
        <result property="goods.title" column="title"/>
        <result property="goods.originalCost" column="original_cost"/>
        <result property="goods.currentPrice" column="current_price"/>
        <result property="goods.discount" column="discount"/>
        <result property="goods.isFreeDelivery" column="is_free_delivery"/>
        <result property="goods.categoryId" column="category_Id"/>
        <result property="category.categoryId" column="category_id"/>
        <result property="category.categoryName" column="category_name"/>
        <result property="category.parentId" column="parent_id"/>
        <result property="category.categoryLevel" column="category_level"/>
        <result property="category.categoryOrder" column="category_order"/>
        <result property="test" column="test"/>
    </resultMap>
    <select id="selectGoodsDTO" resultMap="rmGoods">
        select g.*, c.*, '1' as test
        from babytun.t_goods g,
             babytun.t_category c
        where g.category_id = c.category_id
    </select>
    <insert id="insertSelectKey" parameterType="com.imooc.mybatis.entity.Goods" flushCache="true">
        insert into babytun.t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery,
        category_id)
        values (#{title},#{subTitle},#{originalCost},#{currentPrice},#{discount},#{isFreeDelivery},#{categoryId})
        <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">
            select last_insert_id()
        </selectKey>
    </insert>
    <insert id="insertUseGeneratedKeys" parameterType="com.imooc.mybatis.entity.Goods" useGeneratedKeys="true"
            keyProperty="goodsId" keyColumn="goods_id">
        insert into babytun.t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery,
                                    category_id)
        values (#{title}, #{subTitle}, #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery},
                #{categoryId})</insert>
    <update id="update" parameterType="com.imooc.mybatis.entity.Goods">
        update babytun.t_goods
        set title=#{title},
            sub_title=#{subTitle},
            original_cost=#{originalCost},
            current_price=#{currentPrice},
            discount=#{discount},
            is_free_delivery=#{isFreeDelivery},
            category_id=#{categoryId}
        where goods_id = #{goodsId}
    </update>
    <delete id="delete" parameterType="Integer">delete
                                                from babytun.t_goods
                                                where goods_id = #{value}</delete>
    <delete id="deleteByTitle" parameterType="String">delete
                                                from babytun.t_goods
                                                where title = #{value}</delete>

    <resultMap id="rmGoodsOneToMany" type="com.imooc.mybatis.entity.Goods">
        <id property="goodsId" column="goods_id"/>
        <collection property="goodsDetails" select="goodsDetail.selectByGoodsId" column="goods_id"/>
    </resultMap>
    <select id="selectOneToMany" resultMap="rmGoodsOneToMany">
        select *
        from babytun.t_goods
    </select>

    <select id="selectPage" resultType="com.imooc.mybatis.entity.Goods">
        select * from babytun.t_goods where current_price &lt; 1000
    </select>
    <insert id="batchInsert" parameterType="java.util.List">
        insert into babytun.t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery,
        category_id)
        values
            <foreach collection="list" item="item" index="index" separator=",">
                (#{item.title},#{item.subTitle},#{item.originalCost},#{item.currentPrice},#{item.discount},#{item.isFreeDelivery},#{item.categoryId})
            </foreach>
    </insert>
    <delete id="batchDelete" parameterType="java.util.List">
        delete from babytun.t_goods where goods_id in
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>
</mapper>